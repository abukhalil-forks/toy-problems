/*
Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
*/

var returnStringTotal = (carry, total) => {
  if(carry > 0){
    total.push(carry);
  }
  return total.reverse().join("");
}

var times = (number, digit) => {
  var carry = 0;
  var total = [];
  for(var i = number.length -1; i >= 0; i--){
    var currentMult = parseInt(number[i]) * parseInt(digit) + carry;
    total.push(currentMult % 10);
    carry = Math.floor(currentMult / 10);
  }
  return returnStringTotal(carry, total);
}

var pow = (a, b) => {
  a = a.toString();
  var total = a.toString();
  for(var i = 1; i < b; i++){
    total = times(total, a);
  }
  return total;
}

var padNumber = (number, length) => {
  var numberPad = "";  
  for(var i = 0; i < length - number.length; i++){
    numberPad+=0
  }
  return numberPad + number 
}

var distinctNumbers = (size) => {
  var distinctNumbers = {}
  for(var a = 2; a <= size; a++){
    for(var b = 2; b <= size; b++){
      distinctNumbers[pow(a,b)] = true;
    }
  }
  return Object.keys(distinctNumbers).length;
}

module.exports = {distinctNumbers};
